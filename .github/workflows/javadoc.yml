name: Javadoc Generation
on:
  push:
    branches:
      - "master"
      - "testing-*"
  workflow_dispatch:

jobs:
  generate:
    runs-on: ubuntu-latest

    steps:
    
      # Set up our environment
  
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up the JDK environment
        uses: actions/setup-java@v2
        with:
          java-version: 16
          distribution: "temurin"
          cache: gradle
      
      # Make gradle wrapper executable and check it's working properly
      
      - name: Prepare Gradle
        run: |
          rm -rf ./docs/
          mkdir -p ./docs/tempgit/FtcRobotController/
          chmod +x ./gradlew
          ./gradlew --version
        
      # Install our dependencies by building the app, then discarding the build. The cached deps will still be there, and we can use them for the Javadoc

      - name: Import dependencies with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build
          
      # Checkout repository to place FTC SDK into
          
      - name: Prepare link update
        uses: actions/checkout@v2
        with:
          ref: 'gh-pages'
          path: './docs/tempgit/FtcRobotController/'
      
      # We host our own Javadoc of the FTC SDK to allow for easier linking of external Javadocs, so we update the Javadocs on each run
      
      - name: Update links
        run: |
          rm -rf ./docs
          ./gradlew extractJavadoc
          cd ./docs/
          mkdir tempgit
          cd tempgit
          git clone https://github.com/XaverianTeamRobotics/FtcRobotController.git
          cd ./FtcRobotController
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          cd ../../
          rm -rf ./tempgit/FtcRobotController/javadocs/ftc/
          mkdir -p ./tempgit/FtcRobotController/javadocs/ftc/ftccommon
          mkdir -p ./tempgit/FtcRobotController/javadocs/ftc/hardware
          mkdir -p ./tempgit/FtcRobotController/javadocs/ftc/inspection
          mkdir -p ./tempgit/FtcRobotController/javadocs/ftc/onbotjava
          mkdir -p ./tempgit/FtcRobotController/javadocs/ftc/robotcore
          mv ./7.0.0/FtcCommon ./tempgit/FtcRobotController/javadocs/ftc/ftccommon
          mv ./7.0.0/Hardware ./tempgit/FtcRobotController/javadocs/ftc/hardware
          mv ./7.0.0/Inspection ./tempgit/FtcRobotController/javadocs/ftc/inspection
          mv ./7.0.0/OnBotJava ./tempgit/FtcRobotController/javadocs/ftc/onbotjava
          mv ./7.0.0/RobotCore ./tempgit/FtcRobotController/javadocs/ftc/robotcore
          cd ./tempgit/FtcRobotController
          git add -A
          git commit -a -m "Update external link sources ($GITHUB_RUN_NUMBER)
          Information:
            Repository: $GITHUB_REPOSITORY
            Branch: $GITHUB_REF
            Commit: $GITHUB_SHA
            Who triggered action: $GITHUB_ACTOR"
          git push
          cd ../../
          rm -rf ./docs/
          
      # Since our Javadocs are on GitHub Pages, we need to force GitHub Pages to update before continuing
          
      - name: Publish updated links
        uses: peaceiris/actions-gh-pages@v3.7.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./
        
      # Locate our dependencies, build a classpath using them, append Android itself to said classpath, and run the Javadoc command with our flags. All of this, especially the dependendy preperation, is critical to the Javadoc command succeeding. It will fail due to a JDK bug affecting all versions <18, which sadly includes us due to FTC's reliance on Gradle 7. Talk to @tom-ricci amd @MatthewL246 before editing anything to do with this step

      - name: Generate documentation with Javadoc
        run: |
          echo '-classpath "./FtcRobotController/:' >> ./jdtclsp.txt
          aarray=( $(find ~/.gradle/caches/transform*/ -name "classes.jar"  -not -type d) )
          jarray=( $(find ~/.gradle/caches/module*/ -name "*.jar"  -not -type d) )
          rarray=( $(find ~/.gradle/caches/ -name "res" -type d) )
          marray=( $(find ~/.gradle/caches/ -name "AndroidManifest.xml"  -not -type d) )
          for i in ${aarray[@]}
          do
              echo $i >> ./jdtclsp.txt
              echo ":" >> ./jdtclsp.txt
          done
          for i in ${jarray[@]}
          do
              echo $i >> ./jdtclsp.txt
              echo ":" >> ./jdtclsp.txt
          done
          for i in ${rarray[@]}
          do
              echo $i >> ./jdtclsp.txt
              echo ":" >> ./jdtclsp.txt
          done
          for i in ${marray[@]}
          do
              echo $i >> ./jdtclsp.txt
              echo ":" >> ./jdtclsp.txt
          done
          echo '/usr/local/lib/android/sdk/platforms/android-29/android.jar"' >> ./jdtclsp.txt
          STR=$( cat ./jdtclsp.txt )
          STR=${STR//$'\n'/}
          rm -rf ./jdtclsp.txt
          echo $STR >> ./jdtclsp.txt
          rm -rf ./javadoc-output/
          mkdir ./javadoc-output/
          javadoc -Xdoclint:none -public -splitindex -use -author -version -d ./javadoc-output -link https://docs.oracle.com/en/java/javase/11/docs/api/ -link https://xaverianteamrobotics.github.io/FtcRobotController/javadocs/libs/ftccommon/ -link https://xaverianteamrobotics.github.io/FtcRobotController/javadocs/libs/hardware/ -link https://xaverianteamrobotics.github.io/FtcRobotController/javadocs/libs/inspection/ -link https://xaverianteamrobotics.github.io/FtcRobotController/javadocs/libs/onbotjava/ -link https://xaverianteamrobotics.github.io/FtcRobotController/javadocs/libs/robotcore/ @./jdtclsp.txt $(find ./TeamCode/ -name "*.java" -not -type d) --ignore-source-errors
          echo -e "\n\n\n\n------------------------------\nDEBUG LOGS START\n------------------------------\n\n\n\n"
          echo -e "CLASSPATH:\n\n"
          cat ./jdtclsp.txt
          echo -e "\n\n\nINPUT:\n\n"
          find ./TeamCode/ -name "*.java" -not -type d
          echo -e "\n\n\nOUTPUT:\n\n"
          ls ./javadoc-output/
          echo -e "\n\n\n\n------------------------------\nDEBUG LOGS END\n------------------------------\n\n\n\n"
      # Upload an Artifact of the Javadoc if for whatever reason one might need to download one

      - name: Upload generated Javadoc to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Javadoc-output
          path: ./javadoc-output/
          
      # Upload build reports and the Javadoc to Pages to access online

      - name: Upload generated Javadoc to Pages
        run: |
          # Set up Git and environment variables
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          shopt -s dotglob
          export BRANCH_NAME=$(echo $GITHUB_REF | sed -e "s/refs\/heads\///")
          # Move Javadoc output and build reports
          mv javadoc-output/ ..
          mkdir ../team-reports/
          mv ./TeamCode/build/reports/*  ../team-reports/
          mkdir ../sdk-reports/
          mv ./FtcRobotController/build/reports/* ../sdk-reports/
          # Checkout gh-pages branch
          git reset --hard HEAD
          git clean -f -d -x
          git remote set-branches origin --add 'gh-pages'
          git fetch -a -v
          git checkout gh-pages
          # Copy Javadoc docs to gh-pages
          rm -rf ./javadocs/${BRANCH_NAME}/ || true
          mkdir -p ./javadocs/${BRANCH_NAME}/
          mv ../javadoc-output/* ./javadocs/${BRANCH_NAME}/
          # Copy build reports to gh-pages
          rm -rf ./reports/${BRANCH_NAME}/ || true
          mkdir -p ./reports/${BRANCH_NAME}/team-reports/
          mkdir -p ./reports/${BRANCH_NAME}/sdk-reports/
          mv ../team-reports/* ./reports/${BRANCH_NAME}/team-reports/
          mv ../sdk-reports/* ./reports/${BRANCH_NAME}/sdk-reports/
          mv ./reports/${BRANCH_NAME}/team-reports/lint-results-debug.html ./reports/${BRANCH_NAME}/team-reports/index.html || true
          mv ./reports/${BRANCH_NAME}/sdk-reports/lint-results-debug.html ./reports/${BRANCH_NAME}/sdk-reports/index.html || true
          # Commit and push changes
          git add -A
          git commit -a -m "Javadoc documentation update ($GITHUB_RUN_NUMBER)
          Information:
            Repository: $GITHUB_REPOSITORY
            Branch: $GITHUB_REF
            Commit: $GITHUB_SHA
            Who triggered action: $GITHUB_ACTOR"
          git push
